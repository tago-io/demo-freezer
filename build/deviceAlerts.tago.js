/*
 * TagoIO (https://tago.io/)
 * TagoIO Builder V3.0.1 (https://git.io/JJ8Si)
 * -------------------
 * Generated by     :: guilhermeco
 * Generated at     :: Monday, October 25, 2021, 6:36 PM Coordinated Universal Time
 * Machine          :: MacBook-Pro-de-Guilherme.local <darwin> - Node.js v14.17.6
 * Origin file      :: src/deviceAlerts.ts <Typescript>
 * Destination file :: ./build/deviceAlerts.tago.js
 * -------------------
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/deviceAlerts.ts
__export(exports, {
  default: () => deviceAlerts_default
});
var import_sdk2 = __toModule(require("@tago-io/sdk"));

// src/lib/getDevice.ts
var import_sdk = __toModule(require("@tago-io/sdk"));
async function getDevice(account, device_id) {
  const customer_token = await import_sdk.Utils.getTokenByName(account, device_id);
  const customer_dev = new import_sdk.Device({ token: customer_token });
  return customer_dev;
}
var getDevice_default = getDevice;

// src/lib/getPushMessage.ts
async function getPushMessage(account, message_builder, template_name) {
  const run = await account.run.info();
  const template = run.email_templates[template_name];
  template.value = template.value.replace(/\$/g, "");
  for (const key of Object.keys(message_builder)) {
    const regex = new RegExp(`${key}`, "g");
    template.value = template.value.replace(regex, message_builder[key]);
  }
  return template;
}

// src/deviceAlerts.ts
async function sendMessage(context, account, alerts, company_dev, device_name, company_id) {
  const smsService = new import_sdk2.Services({ token: context.token }).sms;
  const emailService = new import_sdk2.Services({ token: context.token }).email;
  const smsList = alerts.filter((item) => item.sms);
  const emailList = alerts.filter((item) => item.email);
  const notifList = alerts.filter((item) => item.notif);
  if (!smsList.length && !emailList.length && !notifList.length)
    return context.log("No alert");
  const smsSupersList = [];
  const emailSupersList = [];
  const manager_list = await account.run.listUsers({
    page: 1,
    fields: ["id", "phone", "email", "tags"],
    filter: {
      tags: [
        { key: "company_id", value: company_id }
      ]
    },
    amount: 1e4
  });
  const manager_list_trick = manager_list.filter((x) => x.tags.find((y) => y.value === "manager"));
  const admin_list = await account.run.listUsers({
    page: 1,
    fields: ["id", "phone", "email"],
    filter: {
      tags: [{ key: "access", value: "admin" }]
    },
    amount: 1e4
  });
  for (const admin of admin_list) {
    smsSupersList.push(admin?.phone);
    emailSupersList.push(admin.email);
  }
  for (const manager of manager_list_trick) {
    smsSupersList.push(manager?.phone);
    emailSupersList.push(manager.email);
  }
  context.log(emailSupersList);
  const message = alerts.find((x) => x?.message)?.message;
  if (!message)
    return "No message";
  let template_name;
  if (message.includes("Low"))
    template_name = "device_alert_battery";
  else if (message.includes("threshold"))
    template_name = "device_alert_temperature";
  else if (message.includes("normal"))
    template_name = "device_alert_normal";
  const message_builder = {
    device: alerts[0].device_name,
    location: alerts[0].location,
    percent: alerts[0].percent,
    current_temp: alerts[0]?.current_temp,
    threshold_temperature: alerts[0]?.temperature_threshold,
    unit: alerts[0]?.unit
  };
  if ((smsList.length || smsSupersList.length) && alerts.find((x) => x.sms)) {
    const [sms_targets] = await company_dev.getData({ variables: "alerts_sms", qty: 1 });
    const builded_template = await getPushMessage(account, message_builder, template_name);
    if (sms_targets?.value) {
      sms_targets.value.split(",").forEach((phone) => {
        smsService.send({
          message: builded_template.value,
          to: phone
        }).catch(context.log);
      });
    }
    smsSupersList.forEach((phone) => {
      smsService.send({
        message: builded_template.value,
        to: phone
      }).catch(context.log);
    });
  }
  if ((emailList.length || emailSupersList.length) && alerts.find((x) => x.email)) {
    const [email_target] = await company_dev.getData({ variables: "alerts_email", qty: 1 });
    if (email_target?.value) {
      const external_email_list = email_target.value.split(";");
      external_email_list.forEach((email) => emailService.send({
        to: email,
        template: {
          name: template_name,
          params: message_builder
        }
      }).then(context.log).catch(context.log));
    }
    emailSupersList.forEach((email) => {
      emailService.send({
        to: email,
        template: {
          name: template_name,
          params: message_builder
        }
      }).then(context.log).catch(context.log);
    });
  }
  if (alerts.find((x) => x.notif)) {
    const builded_template = await getPushMessage(account, message_builder, template_name);
    const notif_message = builded_template.value.substr(15, builded_template.value.length - 59);
    admin_list.forEach(({ id: user_id }) => {
      account.run.notificationCreate(user_id, {
        message: notif_message,
        title: "Your sensor triggered an alert!"
      }).then(console.log, console.log).catch((msg) => console.log(msg));
    });
    manager_list_trick.forEach(({ id: user_id }) => {
      account.run.notificationCreate(user_id, {
        message: notif_message,
        title: "Your sensor triggered an alert!"
      }).then(console.log, console.log).catch((msg) => console.log(msg));
    });
  }
}
async function batteryAlert(account, company_dev, device, data, device_name, company_name, building_name, allow_email, allow_sms, allow_notif) {
  const [battery_alert] = await company_dev.getData({ variables: "alert_low_battery", qty: 1 });
  if (!battery_alert?.value)
    console.log("NO BATTERY ALERT SETUP YET");
  const percent = data.value;
  let message;
  if (Number(percent) <= Number(battery_alert?.value)) {
    message = `* Low battery: ${percent}V. Located on: ${company_name} - ${building_name}`;
  } else {
    return {
      sms: allow_sms,
      email: allow_email,
      notif: allow_notif,
      reset: true,
      message: `Device "${device_name}" battery is back to normal`,
      device_name,
      location: `${company_name} - ${building_name}`
    };
  }
  return {
    sms: allow_sms,
    email: allow_email,
    notif: allow_notif,
    message,
    subject: "Sensor battery alert!",
    device_name,
    location: `${company_name} - ${building_name}`,
    percent: `${percent}V`
  };
}
async function temperatureAlert(account, company_dev, device, data, device_name, company_name, building_name, allow_email, allow_sms, allow_notif) {
  let message;
  let temperature_threshold = "";
  let current_temperature = Number(data.value);
  const alert_data = await company_dev.getData({ variables: ["alert_temp_max", "alert_temp_min", "alert_temp_unit"], qty: 1 });
  const alert_temp_max = alert_data.find((x) => x.variable === "alert_temp_max")?.value;
  const alert_temp_min = alert_data.find((x) => x.variable === "alert_temp_min")?.value;
  const alert_temp_unit = alert_data.find((x) => x.variable === "alert_temp_unit")?.value || "F";
  if (alert_temp_unit === "F") {
    current_temperature = Number(data.value) * (9 / 5) + 32;
  }
  if (alert_temp_max && current_temperature > alert_temp_max) {
    message = `* Sensor "${device_name}" reported a high temperature. Current temperature: ${current_temperature} ${alert_temp_unit} / Maximum temperature threshold: ${alert_temp_max} ${alert_temp_unit}. Located on: ${company_name} - ${building_name}`;
    temperature_threshold = alert_temp_max;
  } else if (alert_temp_min && current_temperature < alert_temp_min) {
    message = `* Sensor "${device_name}" reported a low temperature. Current temperature: ${current_temperature} ${alert_temp_unit} / Minimum temperature threshold: ${alert_temp_min} ${alert_temp_unit}. Located on: ${company_name} - ${building_name}`;
    temperature_threshold = alert_temp_min;
  } else {
    return {
      sms: allow_sms,
      email: allow_email,
      notif: allow_notif,
      reset: true,
      message: `Sensor "${device_name}" temperature status is back to normal.`,
      device_name,
      location: `${company_name} - ${building_name}`
    };
  }
  return {
    sms: allow_sms,
    email: allow_email,
    notif: allow_notif,
    message,
    subject: "Sensor triggered a temperature alert!",
    device_name,
    location: `${company_name} - ${building_name}`,
    current_temp: String(current_temperature),
    temperature_threshold,
    unit: alert_temp_unit
  };
}
var alertFunctions = {
  battery: batteryAlert,
  temp_sht: temperatureAlert,
  temp_ds: temperatureAlert
};
async function handler(context, scope) {
  context.log("Running Analysis");
  const environment = import_sdk2.Utils.envToJson(context.environment);
  if (!environment) {
    return;
  } else if (!environment.config_token) {
    throw "Missing config_token environment var";
  } else if (!environment.account_token) {
    throw "Missing account_token environment var";
  }
  const { origin: device_id } = scope[0];
  const config_dev = new import_sdk2.Device({ token: environment.config_token });
  const account = new import_sdk2.Account({ token: environment.account_token });
  const device = await getDevice_default(account, device_id);
  const { tags, name: device_name } = await account.devices.info(device_id);
  const { value: company_id } = tags.find((tag) => tag.key === "company_id") || {};
  const { value: bldg_id } = tags.find((tag) => tag.key === "building_id") || {};
  if (!company_id)
    return context.log(`Sensor ${device_id} has no building`);
  if (!bldg_id)
    return context.log(`Sensor ${device_id} has no apartment`);
  const company_dev = await getDevice_default(account, company_id);
  const [company_name] = await config_dev.getData({ variables: "company_name", series: company_id, qty: 1 });
  const [building_name] = await company_dev.getData({ variables: "building_name", series: bldg_id, qty: 1 });
  const alerts = [];
  const params = await account.devices.paramList(device_id);
  const setup = await company_dev.getData({ variables: ["alert_send_email", "alert_send_sms", "alert_send_notif"], qty: 1 });
  const allow_email = setup.find((item) => item.variable.includes("email"));
  const allow_sms = setup.find((item) => item.variable.includes("sms"));
  const allow_notif = setup.find((item) => item.variable.includes("notif"));
  for (const item of scope) {
    if (item.variable in alertFunctions) {
      const param_key = item.variable.includes("temp") ? "temp" : item.variable;
      const trigger = params.find((param) => param.key === param_key) || { key: param_key, sent: false, value: "false" };
      const result = await alertFunctions[item.variable](account, company_dev, device, item, device_name, company_name.value, building_name.value, allow_email?.value, allow_sms?.value, allow_notif?.value);
      if (result.reset) {
        if (trigger.sent) {
          await account.devices.paramSet(device_id, { ...trigger, sent: false, value: "false" });
          const alert_history = {
            variable: "alert_history",
            value: result.message,
            metadata: {
              color: "lightgreen",
              company: company_id,
              bldg: bldg_id,
              sensor: device_name,
              link: `https://admin.tago.io/dashboards/info/${environment.dash_freezer_sensor}?company_device=${company_id}&building_device=${bldg_id}&freezer_sensor=${device_id}`
            }
          };
          await device.sendData(alert_history);
          company_dev.sendData(alert_history);
          config_dev.sendData(alert_history);
          alerts.push(result);
        }
      } else if (!result.reset && !trigger.sent) {
        await account.devices.paramSet(device_id, { ...trigger, sent: true, value: "true" }).catch((e) => console.log(e));
        alerts.push(result);
      }
    }
  }
  if (!alerts.length)
    return;
  console.log(alerts);
  const history = alerts.map((item) => item?.reset ? null : {
    variable: "alert_history",
    value: item.message.replace("* ", ""),
    metadata: {
      color: "pink",
      company: company_id,
      bldg: bldg_id,
      sensor: device_name,
      link: `https://admin.tago.io/dashboards/info/${environment.dash_freezer_sensor}?company_device=${company_id}&building_device=${bldg_id}&freezer_sensor=${device_id}`
    }
  });
  device.sendData(history);
  company_dev.sendData(history);
  config_dev.sendData(history);
  sendMessage(context, account, alerts, company_dev, device_name, company_id);
}
async function startAnalysis(context, scope) {
  try {
    await handler(context, scope);
    context.log("Analysis finished");
  } catch (error) {
    console.log(error);
    context.log(error.message || JSON.stringify(error));
  }
}
var deviceAlerts_default = new import_sdk2.Analysis(startAnalysis, { token: "32fd3ab6-47b4-43e2-b622-b7b9521b7c6b" });
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
