/*
 * TagoIO (https://tago.io/)
 * TagoIO Builder V3.0.1 (https://git.io/JJ8Si)
 * -------------------
 * Generated by     :: guilhermeco
 * Generated at     :: Monday, October 25, 2021, 6:36 PM Coordinated Universal Time
 * Machine          :: MacBook-Pro-de-Guilherme.local <darwin> - Node.js v14.17.6
 * Origin file      :: src/handler.ts <Typescript>
 * Destination file :: ./build/handler.tago.js
 * -------------------
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/lib/validation.ts
function validation(validation_var, device, show_markdown) {
  return function _(message, type) {
    if (!message || !type)
      throw "Missing message or type";
    device.sendData({
      variable: validation_var,
      value: message,
      metadata: {
        type: ["success", "danger", "warning"].includes(type) ? type : null,
        color: !["success", "danger", "warning"].includes(type) ? type : null,
        show_markdown
      }
    });
    return message;
  };
}
var init_validation = __esm({
  "src/lib/validation.ts"() {
  }
});

// src/lib/registerUser.ts
async function inviteUser(context, account, user_data, domain_url) {
  user_data.email = user_data.email.toLowerCase();
  user_data.tags = user_data.tags.map((x, i) => ({ ...x, __rowManipulatorKey: i + 1 }));
  const password = user_data.password || String(new Date().getTime());
  const result = await account.run.userCreate({
    active: true,
    company: "",
    email: user_data.email,
    language: "en",
    name: user_data.name,
    phone: String(user_data.phone) || "",
    tags: user_data.tags,
    timezone: user_data.timezone || "America/New_York",
    password
  }).catch(() => null);
  if (!result) {
    const [user2] = await account.run.listUsers({ page: 1, amount: 1, filter: { email: user_data.email }, fields: ["id", "name", "email", "tags"] });
    if (!user2)
      throw "Couldn`t find user data";
    user2.tags = user2.tags.filter((x) => user_data.tags.find((y) => x.key !== y.key));
    user2.tags = user2.tags.concat(user_data.tags);
    await account.run.userEdit(user2.id, { tags: user_data.tags });
    return user2.id;
  }
  let user_type = "Administrator";
  if (user_data?.tags.find((x) => x.key === "access").value === "manager")
    user_type = "Manager";
  if (user_data?.tags.find((x) => x.key === "access").value === "apartmentUser")
    user_type = "End-user";
  const user_company = user_data?.company || "";
  const emailService = new import_sdk.Services({ token: context.token }).email;
  emailService.send({
    to: user_data.email,
    subject: "Account Details",
    message: `Your account for the application was created! 

 User type: ${user_type} 
Your Login is: ${user_data.email}
Your password is: ${password}

 In order to access it, visit our website ${domain_url}`
  });
  const [user] = await account.run.listUsers({ page: 1, amount: 1, filter: { email: user_data.email } });
  if (!user)
    throw "Couldn`t find user data";
  return user.id;
}
var import_sdk, registerUser_default;
var init_registerUser = __esm({
  "src/lib/registerUser.ts"() {
    import_sdk = __toModule(require("@tago-io/sdk"));
    registerUser_default = inviteUser;
  }
});

// src/lib/data.logic.ts
function parseTagoObject(body, serie) {
  if (!serie)
    serie = String(new Date().getTime());
  return Object.keys(body).map((item) => {
    return {
      variable: item,
      value: body[item] instanceof Object ? body[item].value : body[item],
      serie,
      time: body[item] instanceof Object ? body[item].time : null,
      location: body[item] instanceof Object ? body[item].location : null,
      metadata: body[item] instanceof Object ? body[item].metadata : null
    };
  }).filter((item) => item.value !== null && item.value !== void 0);
}
var init_data_logic = __esm({
  "src/lib/data.logic.ts"() {
  }
});

// src/services/super_users/register.ts
var register_default;
var init_register = __esm({
  "src/services/super_users/register.ts"() {
    init_validation();
    init_registerUser();
    init_data_logic();
    register_default = async ({ config_dev, context, scope, account, environment }) => {
      const validate = validation("new_user_validation", config_dev);
      validate("Inviting...", "warning");
      const new_user_type = scope.find((x) => x.variable === "new_user_type");
      const new_user_phone = scope.find((x) => x.variable === "new_user_phone");
      const new_user_name = scope.find((x) => x.variable === "new_user_name");
      const new_user_email = scope.find((x) => x.variable === "new_user_email");
      const new_user_company = scope.find((x) => x.variable === "new_user_company");
      if (!new_user_name.value) {
        validate("Missing user's name", "danger");
        throw "<New Device> Missing user's name";
      }
      if (!new_user_email.value) {
        validate("Missing user's email", "danger");
        throw "<New Device> Missing user's email";
      }
      if (new_user_phone?.value) {
        if (!new_user_phone.value.includes("+")) {
          new_user_phone.value = `+1${new_user_phone.value}`;
        }
      }
      new_user_email.value = String(new_user_email.value).toLowerCase();
      const [user_exists] = await config_dev.getData({ variables: ["user_email", "admin_email"], values: new_user_email.value, qty: 1 });
      if (user_exists) {
        validate("The user is already registered", "danger");
        throw "<New Device> User already exist.";
      }
      const { timezone } = await account.info();
      const domain_url = environment.run_url;
      let device_data;
      if (new_user_type.value === "admin") {
        const user_data = {
          name: new_user_name.value,
          email: new_user_email.value,
          phone: new_user_phone?.value,
          type: new_user_type.value,
          tags: [{ key: "access", value: "admin" }],
          timezone
        };
        const new_user_id = await registerUser_default(context, account, user_data, domain_url);
        device_data = parseTagoObject({
          user_id: {
            value: new_user_id,
            metadata: {
              label: new_user_name.value
            }
          },
          admin_name: new_user_name.value,
          admin_email: new_user_email.value,
          admin_phone: new_user_phone?.value
        }, new_user_id);
      } else {
        const user_data = {
          name: new_user_name.value,
          email: new_user_email.value,
          phone: new_user_phone?.value,
          type: new_user_type.value,
          timezone,
          company: new_user_company.value,
          tags: [
            { key: "access", value: "manager" }
          ]
        };
        user_data.tags = user_data.tags.concat(new_user_company.metadata.sentValues.map((x) => ({ key: "company_id", value: x.value })));
        const new_user_id = await registerUser_default(context, account, user_data, domain_url);
        device_data = parseTagoObject({
          user_id: {
            value: new_user_id,
            metadata: {
              label: new_user_name.value
            }
          },
          user_name: new_user_name.value,
          user_email: new_user_email.value,
          user_company: new_user_company,
          user_phone: new_user_phone?.value
        }, new_user_id);
      }
      await config_dev.sendData(device_data);
      validate("User successfully added", "success");
    };
  }
});

// src/services/super_users/remove.ts
var remove_default;
var init_remove = __esm({
  "src/services/super_users/remove.ts"() {
    remove_default = async ({ config_dev, context, scope, account, environment }) => {
      const { serie: user_id } = scope[0];
      const user_exists = await account.run.userInfo(user_id);
      if (!user_exists)
        throw "User does not exist";
      await config_dev.deleteData({ series: user_id, qty: 9999 });
      await account.run.userDelete(user_id);
    };
  }
});

// src/services/super_users/edit.ts
var edit_default;
var init_edit = __esm({
  "src/services/super_users/edit.ts"() {
    edit_default = async ({ config_dev, context, scope, account, environment }) => {
      const { serie: user_id } = scope[0];
      const user_company = scope.find((x) => x.variable === "user_company");
      const user_name = scope.find((x) => x.variable === "user_name") || scope.find((x) => x.variable === "admin_name");
      const user_phone = scope.find((x) => x.variable === "user_phone") || scope.find((x) => x.variable === "admin_phone");
      let { name, phone, tags } = await account.run.userInfo(user_id);
      tags = tags.filter((x) => !["company_id"].includes(x.key));
      if (user_company?.value) {
        const user_companies = user_company.value.split(";");
        user_companies.forEach((company_id) => tags.push({ key: "company_id", value: company_id }));
      }
      if (user_phone) {
        phone = user_phone.value;
      }
      if (user_name) {
        name = user_name.value;
      }
      await account.run.userEdit(user_id, { tags, name, phone });
    };
  }
});

// src/services/super_users/index.ts
var super_users_exports = {};
__export(super_users_exports, {
  checkType: () => checkType,
  controller: () => controller
});
function checkType(scope, environment) {
  if (scope.find((x) => x.variable === "new_user_name"))
    return "add";
  else if (scope.find((x) => ["admin_name", "user_name"].includes(x.variable)) && environment._widget_exec === "delete")
    return "remove";
  else if (scope.find((x) => ["user_company", "user_name", "admin_name", "user_phone", "admin_phone"].includes(x.variable)) && environment._widget_exec === "edit")
    return "edit";
}
async function controller(params) {
  const type = checkType(params.scope, params.environment);
  if (type === "add")
    await register_default(params);
  else if (type === "remove")
    await remove_default(params);
  else if (type === "edit")
    await edit_default(params);
}
var init_super_users = __esm({
  "src/services/super_users/index.ts"() {
    init_register();
    init_remove();
    init_edit();
  }
});

// src/lib/getDevice.ts
async function getDevice(account, device_id) {
  const customer_token = await import_sdk2.Utils.getTokenByName(account, device_id);
  const customer_dev = new import_sdk2.Device({ token: customer_token });
  return customer_dev;
}
var import_sdk2, getDevice_default;
var init_getDevice = __esm({
  "src/lib/getDevice.ts"() {
    import_sdk2 = __toModule(require("@tago-io/sdk"));
    getDevice_default = getDevice;
  }
});

// src/lib/getDashboardByExportID.ts
async function findDashboardByExportID(account, export_id) {
  const [dash] = await account.dashboards.list({ amount: 1, fields: ["id", "tags"], filter: { tags: [{ key: "export_id", value: export_id }] } });
  if (!dash)
    throw `Dashboard ${export_id} not found`;
  return dash?.id;
}
var getDashboardByExportID_default;
var init_getDashboardByExportID = __esm({
  "src/lib/getDashboardByExportID.ts"() {
    getDashboardByExportID_default = findDashboardByExportID;
  }
});

// src/services/sensor/register.ts
async function installDevice(account, { device_name, device_eui, connector_network, company_id, building_id }) {
  const [network, connector] = connector_network.split(",");
  const device_data = {
    name: device_name,
    active: true,
    serie_number: device_eui,
    connector,
    network,
    tags: [
      { key: "device_type", value: "freezer" },
      { key: "device_eui", value: device_eui },
      { key: "company_id", value: company_id }
    ]
  };
  if (building_id) {
    device_data.tags.push({ key: "building_id", value: building_id });
  }
  const new_device = await account.devices.create(device_data);
  const device = new import_sdk3.Device({ token: new_device.token });
  const params = [
    { key: "battery_voltage", value: "false", sent: false },
    { key: "external_input", value: "false", sent: false },
    { key: "checkin", value: "checkin", sent: false }
  ];
  params.forEach((item) => account.devices.paramSet(new_device.device_id, item));
  return { ...new_device, device };
}
var import_sdk3, register_default2;
var init_register2 = __esm({
  "src/services/sensor/register.ts"() {
    import_sdk3 = __toModule(require("@tago-io/sdk"));
    init_validation();
    init_getDevice();
    init_getDashboardByExportID();
    register_default2 = async ({ config_dev, context, scope, account, environment }) => {
      const validate = validation("new_device_validation", config_dev);
      validate("Resgistering...", "warning");
      const new_device_name = scope.find((x) => x.variable === "new_device_name");
      const new_device_company = scope.find((x) => x.variable === "new_device_company");
      const new_device_building = scope.find((x) => x.variable === "new_device_building");
      const new_device_type = scope.find((x) => x.variable === "new_device_type");
      const new_device_eui = scope.find((x) => x.variable === "new_device_eui");
      if (!new_device_name?.value) {
        throw validate("Missing device's name", "danger");
      } else if ((new_device_name?.value).length < 3) {
        throw validate("Device name must be greater than 3 characters", "danger");
      } else if (!new_device_company?.value) {
        throw validate("Missing device's company", "danger");
      } else if (!new_device_type?.value) {
        throw validate("Missing device's type", "danger");
      } else if (!new_device_eui?.value) {
        throw validate("Missing device's EUI", "danger");
      }
      if (new_device_eui.value.length > 16) {
        new_device_eui.value = new_device_eui.value.slice(26, 42);
      }
      const [already_exist] = await config_dev.getData({ variables: ["device_eui", "device_name"], values: [new_device_name.value, new_device_eui.value], qty: 1 });
      if (already_exist?.variable === "device_eui") {
        throw validate("Device EUI already registered.", "danger");
      }
      const device_creation = {
        device_name: new_device_name.value,
        device_eui: new_device_eui.value.toUpperCase(),
        connector_network: new_device_type.value,
        company_id: new_device_company.value,
        building_id: new_device_building.value
      };
      const { device_id, device } = await installDevice(account, device_creation).catch((error) => {
        throw validate(error, "danger");
      }).catch((error) => {
        validate(error, "danger");
        throw error;
      });
      const dash_freezer_details = await getDashboardByExportID_default(account, "60195f92090d3600184cc54f");
      const url = `https://admin.tago.io/dashboards/info/${dash_freezer_details}?building_device=${new_device_building.value}&company_device=${new_device_company.value}&freezer_sensor=${device_id}`;
      const serie = device_id;
      const device_data = [
        {
          variable: "device_id",
          value: serie,
          serie,
          metadata: {
            label: new_device_name.value
          }
        },
        {
          variable: "device_name",
          value: new_device_name.value,
          serie,
          metadata: {
            url,
            status: "No data"
          }
        },
        {
          variable: "device_eui",
          value: new_device_eui.value,
          serie,
          metadata: {
            label: `${new_device_name.value} - ${new_device_eui.value}`
          }
        },
        {
          variable: "device_company",
          value: new_device_company.value,
          serie,
          metadata: new_device_company.metadata
        },
        {
          variable: "device_type",
          value: new_device_type.value,
          serie,
          metadata: new_device_type.metadata
        }
      ];
      if (new_device_building?.value) {
        device_data.push({
          variable: "device_building",
          serie,
          value: new_device_building.value,
          metadata: new_device_building.metadata
        });
        const building_dev = await getDevice_default(account, new_device_building.value);
        const building_data = device_data.filter((x) => ["device_id", "device_name", "device_type"].includes(x.variable));
        building_dev.sendData(building_data);
      }
      await config_dev.sendData(device_data);
      config_dev.sendData({
        variable: "filter_device_eui",
        value: new_device_eui.value,
        serie: new_device_company.value,
        metadata: {
          dev_serie: serie,
          label: `${new_device_name.value} - ${new_device_eui.value}`
        }
      });
      const company_data = device_data.filter((x) => ["device_name", "device_type", "device_eui", "device_building"].includes(x.variable));
      const company_device = await getDevice_default(account, new_device_company.value);
      await company_device.sendData(company_data);
      const sensor_dev = await getDevice_default(account, device_id);
      await sensor_dev.sendData({
        variable: "device_name",
        value: new_device_name.value,
        serie,
        metadata: {
          url,
          status: "No data"
        }
      });
      validate("Device successfully added", "success");
    };
  }
});

// src/services/sensor/remove.ts
var remove_default2;
var init_remove2 = __esm({
  "src/services/sensor/remove.ts"() {
    init_getDevice();
    remove_default2 = async ({ config_dev, context, scope, account, environment }) => {
      const { serie, id } = scope[0];
      const device_company = scope.find((x) => x.variable === "device_company");
      const device_building = scope.find((x) => x.variable === "device_building");
      const device_eui = scope.find((x) => x.variable === "device_eui");
      if (device_company) {
        const company_device = await getDevice_default(account, device_company.value);
        await company_device.deleteData({ series: serie, qty: 9999 });
      }
      if (device_building) {
        const building_device = await getDevice_default(account, device_building.value);
        await building_device.deleteData({ series: serie, qty: 9999 });
      }
      await config_dev.deleteData({ series: serie, qty: 9999 });
      await config_dev.deleteData({ variables: "move_device_id", values: id });
      await config_dev.deleteData({ variables: "filter_device_eui", values: [device_eui.value, device_eui.value.toUpperCase()] });
      const device_info = await account.devices.info(serie);
      await account.devices.delete(serie).then((msg) => console.log(msg));
      await account.buckets.delete(device_info.bucket.id);
    };
  }
});

// src/services/sensor/edit.ts
var edit_default2;
var init_edit2 = __esm({
  "src/services/sensor/edit.ts"() {
    init_getDevice();
    edit_default2 = async ({ config_dev, context, scope, account, environment }) => {
      const { serie } = scope[0];
      const device_name = scope.find((x) => x.variable === "device_name");
      const sensor_dev = await getDevice_default(account, serie);
      if (device_name) {
        const data = await config_dev.getData({ variables: ["device_id", "device_company", "device_building"], series: serie, qty: 1 });
        const device_id = data.find((x) => x.variable === "device_id");
        const device_company = data.find((x) => x.variable === "device_company");
        const device_building = data.find((x) => x.variable === "device_building");
        await config_dev.deleteData({ ids: device_id.id });
        device_id.metadata.label = device_name.value;
        config_dev.sendData(device_id);
        await account.devices.edit(serie, { name: device_name.value });
        const bucket_id = (await sensor_dev.info()).bucket;
        await account.buckets.edit(bucket_id.id, { name: device_name.value });
        if (device_company?.value) {
          const company_dev = await getDevice_default(account, device_company.value);
          await company_dev.deleteData({ variables: "device_id", series: serie });
          company_dev.sendData(device_id);
          if (device_building?.value) {
            const building_dev = await getDevice_default(account, device_building.value);
            const [dev_name] = await building_dev.getData({ variables: "device_name", qty: 1, series: serie });
            dev_name.value = device_name.value;
            await building_dev.deleteData({ variables: ["device_id", "device_name"], series: serie });
            building_dev.sendData([device_id, dev_name]);
          }
        }
        const [sensor_name_fallback] = await sensor_dev.getData({ variables: "device_name", qty: 1, series: serie });
        await sensor_dev.deleteData({ variables: "device_name", qty: 1, series: serie });
        sensor_name_fallback.value = device_name.value;
        delete sensor_name_fallback.time;
        delete sensor_name_fallback.id;
        await sensor_dev.sendData(sensor_name_fallback);
      }
    };
  }
});

// src/services/sensor/moveDevice.ts
var moveDevice_default;
var init_moveDevice = __esm({
  "src/services/sensor/moveDevice.ts"() {
    init_getDevice();
    init_validation();
    init_getDashboardByExportID();
    moveDevice_default = async ({ config_dev, context, scope, account, environment }) => {
      const validate = validation("move_device_validation", config_dev);
      validate("Moving...", "warning");
      const device_move_eui = scope.find((x) => x.variable === "move_device_eui");
      const [device_eui] = await config_dev.getData({ variables: "device_eui", values: device_move_eui.value, qty: 1 });
      const [dev_id_data] = await config_dev.getData({ series: device_eui.serie, variables: "device_id", qty: 1 });
      const device_id = dev_id_data?.value;
      const { value: company_id, metadata: company_metadata } = scope.find((x) => x.variable === "move_device_company");
      const { value: building_id, metadata: build_metadata } = scope.find((x) => x.variable === "move_device_building");
      let { tags } = await account.devices.info(device_id);
      const old_company = tags.find((tag) => tag.key === "company_id");
      const old_building = tags.find((tag) => tag.key === "building_id");
      if (old_company?.value === company_id && old_building?.value === building_id) {
        return validate("Device is already in this building and apartment", "warning");
      }
      tags = tags.filter((tag) => !["company_id", "building_id"].includes(tag.key));
      tags.push({ key: "company_id", value: company_id });
      tags.push({ key: "building_id", value: building_id });
      account.devices.edit(device_id, { tags });
      await config_dev.deleteData({ variables: ["device_company", "device_building"], series: device_id });
      const new_data = [
        { variable: "device_company", value: company_id, metadata: company_metadata, serie: device_id },
        { variable: "device_building", value: building_id, metadata: build_metadata, serie: device_id }
      ];
      config_dev.sendData(new_data);
      let device_data = await config_dev.getData({ variables: ["device_name", "device_type", "device_eui"], series: device_id, qty: 1 });
      const device_name = device_data.find((data) => data.variable === "device_name");
      const dash_freezer_details = await getDashboardByExportID_default(account, "60195f92090d3600184cc54f");
      const url = `https://admin.tago.io/dashboards/info/${dash_freezer_details}?company_device=${company_id}&building_device=${building_id}&freezer_sensor=${device_id}`;
      device_name.metadata.url = url;
      await config_dev.deleteData({ variables: "device_name", series: device_id });
      config_dev.sendData({ ...device_name, time: null });
      device_data = device_data.filter((x) => x.variable !== "device_name");
      device_data = device_data.concat(device_name);
      if (company_id !== old_company?.value) {
        if (old_company) {
          const old_company_dev = await getDevice_default(account, old_company.value).catch(() => null);
          if (old_company_dev)
            old_company_dev.deleteData({ serie: device_id, qty: 9e3 });
        }
        const company_dev = await getDevice_default(account, company_id);
        company_dev.sendData(device_data.concat(new_data));
      }
      if (old_building?.value) {
        const old_build_dev = await getDevice_default(account, old_building.value).catch(() => null);
        if (old_build_dev)
          old_build_dev.deleteData({ serie: device_id, qty: 9e3 });
      }
      const building_dev = await getDevice_default(account, building_id);
      building_dev.sendData(device_data.concat(new_data));
      config_dev.sendData({
        variable: "filter_device_eui",
        value: device_move_eui.value,
        serie: company_id
      });
      validate("Device succesfully moved!", "success");
    };
  }
});

// src/services/sensor/index.ts
var sensor_exports = {};
__export(sensor_exports, {
  checkType: () => checkType2,
  controller: () => controller2
});
function checkType2(scope, environment) {
  if (scope.find((x) => x.variable === "new_device_eui"))
    return "add";
  else if (scope.find((x) => x.variable === "device_eui") && environment._widget_exec === "delete")
    return "remove";
  else if (scope.find((x) => x.variable === "device_name") && environment._widget_exec === "edit")
    return "edit";
  else if (scope.find((x) => x.variable === "move_device_eui"))
    return "movedevice";
}
async function controller2(params) {
  const type = checkType2(params.scope, params.environment);
  if (type === "add")
    await register_default2(params);
  else if (type === "remove")
    await remove_default2(params);
  else if (type === "edit")
    await edit_default2(params);
  else if (type === "movedevice")
    await moveDevice_default(params);
}
var init_sensor = __esm({
  "src/services/sensor/index.ts"() {
    init_register2();
    init_remove2();
    init_edit2();
    init_moveDevice();
  }
});

// src/services/company/register.ts
async function installDevice2(account, new_company_name) {
  const device_data = {
    name: new_company_name
  };
  const new_company = await account.devices.create(device_data);
  await account.devices.edit(new_company.device_id, {
    tags: [
      { key: "company_id", value: new_company.device_id },
      { key: "device_type", value: "company" }
    ]
  });
  const new_company_dev = new import_sdk4.Device({ token: new_company.token });
  return { ...new_company, device: new_company_dev };
}
var import_sdk4, register_default3;
var init_register3 = __esm({
  "src/services/company/register.ts"() {
    import_sdk4 = __toModule(require("@tago-io/sdk"));
    init_validation();
    init_data_logic();
    init_getDashboardByExportID();
    register_default3 = async ({ config_dev, context, scope, account, environment }) => {
      const validate = validation("new_company_validation", config_dev);
      validate("Resgistering...", "warning");
      const settings_id = (await config_dev.info()).id;
      const new_company_name = scope.find((x) => x.variable === "new_company_name");
      const new_company_address = scope.find((x) => x.variable === "new_company_address");
      if (!new_company_name?.value) {
        validate("Missing Building's name", "danger");
        throw "<New Device> Missing company's name";
      } else if (new_company_name.value.length < 3) {
        throw validate("Building name must be greater than 3 characters", "danger");
      } else if (!new_company_address?.value) {
        validate("Missing Building's address", "danger");
        throw "<New Device> Missing company's address";
      }
      const [company_exists] = await config_dev.getData({ variables: "company_name", values: new_company_name.value, qty: 1 });
      if (company_exists) {
        validate("The Building is already registered", "danger");
        throw "<New Device> Company already exist.";
      }
      const { bucket_id, device_id, device: company_dev } = await installDevice2(account, new_company_name.value);
      const serie = device_id;
      const dash_locations = await getDashboardByExportID_default(account, "602511d67cb78b001351dbca");
      const url = `https://admin.tago.io/dashboards/info/${dash_locations}?company_dev=${serie}&settings_dev=${settings_id}`;
      const device_data = parseTagoObject({
        company_id: {
          value: serie,
          metadata: {
            label: new_company_name.value,
            url
          }
        },
        company_name: {
          value: new_company_name.value,
          location: new_company_address.location,
          metadata: {
            url,
            status: "No data"
          }
        },
        company_address: {
          value: new_company_address.value,
          location: new_company_address.location
        }
      }, serie);
      await config_dev.sendData(device_data);
      validate("Building successfully added", "success");
    };
  }
});

// src/services/company/remove.ts
async function remove({ config_dev, context, scope, account, environment }) {
  const { serie: company_id } = scope[0];
  await config_dev.deleteData({ series: company_id, qty: 9999 });
  await config_dev.deleteData({ values: company_id, qty: 9999 });
  const devices = await account.devices.list({
    amount: 9999,
    page: 1,
    filter: { tags: [{ key: "company_id", value: company_id }] },
    fields: ["id", "bucket", "tags", "name"]
  });
  const remove_devices = devices.filter((device) => !device.tags.find((tag) => tag.value === "freezer"));
  const freezer = devices.filter((device) => device.tags.find((tag) => tag.value === "freezer"));
  remove_devices.forEach((x) => {
    account.devices.delete(x.id);
    account.buckets.delete(x.bucket);
  });
  freezer.forEach(async (x) => {
    const [device_name] = await config_dev.getData({ variables: "device_name", series: x.id, qty: 1 });
    await config_dev.deleteData({ variables: ["device_company", "device_building", "device_name"], series: x.id, qty: 999 });
    delete device_name.metadata.url;
    await config_dev.sendData({ ...device_name });
    await account.devices.edit(x.id, { tags: x.tags.filter((y) => !["company_id", "building_id"].includes(y.key)) });
  });
  const end_users = await account.run.listUsers({
    amount: 9999,
    page: 1,
    filter: {
      tags: [
        { key: "access", value: "apartmentUser" },
        { key: "company_id", value: company_id }
      ]
    },
    fields: ["id"]
  });
  end_users.forEach(async (user) => {
    await account.run.userDelete(user.id);
    await config_dev.deleteData({ series: user.id, qty: 9999 });
  });
  const manager_users = await account.run.listUsers({
    amount: 9999,
    page: 1,
    filter: {
      tags: [
        { key: "access", value: "manager" },
        { key: "company_id", value: company_id }
      ]
    },
    fields: ["id", "tags"]
  });
  manager_users.forEach(async (user) => {
    const [user_company] = await config_dev.getData({ variables: "user_company", series: user.id, qty: 1 });
    await config_dev.deleteData({ variables: "user_company", values: company_id, series: user.id, qty: 999 });
    if (user_company.value.includes(";"))
      user_company.value = user_company.value.replace(`;${company_id}`, "");
    else
      user_company.value = user_company.value.replace(`${company_id}`, "");
    user_company.metadata.sentValues = user_company.metadata.sentValues.filter((x) => !(x.value === company_id));
    await config_dev.sendData({ ...user_company });
    await account.devices.edit(user.id, { tags: user.tags.filter((y) => !["company_id"].includes(y.key)) });
  });
  await config_dev.deleteData({ variables: "device_company", values: company_id, qty: 9e3 });
}
var remove_default3;
var init_remove3 = __esm({
  "src/services/company/remove.ts"() {
    remove_default3 = remove;
  }
});

// src/services/company/edit.ts
var edit_default3;
var init_edit3 = __esm({
  "src/services/company/edit.ts"() {
    init_getDevice();
    edit_default3 = async ({ config_dev, context, scope, account, environment }) => {
      const name = scope.find((x) => x.variable === "company_name");
      const address = scope.find((x) => x.variable === "company_address");
      const { serie: company_id } = scope[0];
      const company_dev = await getDevice_default(account, company_id);
      if (name) {
        await account.devices.edit(company_id, { name: name.value });
        const bucket_id = (await account.devices.info(company_id)).bucket.id;
        await account.buckets.edit(bucket_id, { name: name.value });
        const [company_data] = await config_dev.getData({ variables: "company_id", qty: 1, series: company_id });
        await config_dev.deleteData({ ids: company_data.id });
        company_data.metadata.label = name.value;
        delete company_data.time;
        delete company_data.id;
        await config_dev.sendData(company_data);
        const devs_company = await account.devices.list({
          page: 1,
          fields: ["id", "name", "tags"],
          filter: { tags: [{ key: "company_id", value: company_id }] },
          amount: 1e4
        });
        const id_list = [];
        devs_company.forEach((dev) => {
          id_list.push(dev.id);
        });
        const device_company_data = await config_dev.getData({ variables: "device_company", series: id_list });
        const valve_company_data = await config_dev.getData({ variables: "valve_company", series: id_list });
        await config_dev.deleteData({ variables: "device_company", series: id_list });
        await config_dev.deleteData({ variables: "valve_company", series: id_list });
        for (const obj of device_company_data) {
          obj.metadata.label = name.value;
          await config_dev.sendData(obj);
        }
        for (const obj of valve_company_data) {
          obj.metadata.label = name.value;
          await config_dev.sendData(obj);
        }
      }
      if (address) {
        const [company_name] = await config_dev.getData({ variables: "company_name", qty: 1, series: company_id });
        await config_dev.deleteData({ ids: company_name.id });
        company_name.location = address.location;
        await config_dev.sendData(company_name);
      }
    };
  }
});

// src/services/company/index.ts
var company_exports = {};
__export(company_exports, {
  checkType: () => checkType3,
  controller: () => controller3
});
function checkType3(scope, environment) {
  if (scope.find((x) => x.variable === "new_company_name"))
    return "add";
  else if (scope.find((x) => x.variable === "company_name") && environment._widget_exec === "delete")
    return "remove";
  else if (scope.find((x) => ["company_name", "company_address"].includes(x.variable)) && environment._widget_exec === "edit")
    return "edit";
}
async function controller3(params) {
  const type = checkType3(params.scope, params.environment);
  if (type === "add")
    await register_default3(params);
  else if (type === "remove")
    await remove_default3(params);
  else if (type === "edit")
    await edit_default3(params);
}
var init_company = __esm({
  "src/services/company/index.ts"() {
    init_register3();
    init_remove3();
    init_edit3();
  }
});

// src/services/building/register.ts
async function installDevice3(account, { building_name, company_id, building_category }) {
  const device_data = {
    name: building_name
  };
  const new_building = await account.devices.create(device_data);
  await account.devices.edit(new_building.device_id, {
    tags: [
      { key: "building_id", value: new_building.device_id },
      { key: "company_id", value: company_id },
      { key: "device_type", value: "building" },
      { key: "building_category", value: building_category }
    ]
  });
  const new_building_dev = new import_sdk5.Device({ token: new_building.token });
  return { ...new_building, device: new_building_dev };
}
var import_sdk5, register_default4;
var init_register4 = __esm({
  "src/services/building/register.ts"() {
    import_sdk5 = __toModule(require("@tago-io/sdk"));
    init_validation();
    init_data_logic();
    init_getDashboardByExportID();
    register_default4 = async ({ config_dev, context, scope, account, environment }, company_dev) => {
      const validate = validation("new_building_validation", company_dev);
      validate("Resgistering...", "warning");
      const settings_id = (await config_dev.info()).id;
      const new_building_name = scope.find((x) => x.variable === "new_building_name");
      const new_building_category = scope.find((x) => x.variable === "new_building_category");
      const company_id = scope[0].origin;
      if (!new_building_name.value) {
        throw validate("Missing building's name", "danger");
      } else if (new_building_name.value.length < 3) {
        throw validate("Apartment name must be greater than 3 characters", "danger");
      } else if (!new_building_category.value) {
        throw validate("Missing building's category", "danger");
      }
      const [building_exists] = await company_dev.getData({ variables: "building_name", values: new_building_name.value, qty: 1 });
      if (building_exists) {
        throw validate("This Apartment is already registered", "danger");
      }
      const {
        bucket_id,
        device_id,
        device: building_dev
      } = await installDevice3(account, {
        building_name: new_building_name.value,
        company_id,
        building_category: new_building_category.value
      });
      const { timezone } = await account.info();
      const serie = device_id;
      const dash_location_summary = await getDashboardByExportID_default(account, "60195e9f66fd8200111fb117");
      const url = `https://admin.tago.io/dashboards/info/${dash_location_summary}?company_device=${company_id}&building_device=${device_id}`;
      const device_data = parseTagoObject({
        building_id: {
          value: serie,
          metadata: {
            label: new_building_name.value,
            url
          }
        },
        building_name: {
          value: new_building_name.value,
          location: new_building_name.location,
          metadata: {
            url,
            status: "No data"
          }
        },
        building_category: new_building_category.value
      }, device_id);
      await company_dev.sendData(device_data);
      await building_dev.sendData(device_data);
      await config_dev.sendData({
        variable: "building_id",
        value: device_id,
        serie: company_id,
        metadata: {
          label: new_building_name.value,
          url: `https://admin.tago.io/dashboards/info/${environment.dash_apt_summary}?company_device=${company_id}&building_device=${device_id}`
        }
      });
      validate("Location successfully added", "success");
    };
  }
});

// src/services/building/remove.ts
var remove_default4;
var init_remove4 = __esm({
  "src/services/building/remove.ts"() {
    remove_default4 = async ({ config_dev, context, scope, account, environment }, company_dev) => {
      const { serie: building_id } = scope[0];
      await config_dev.deleteData({ values: building_id, qty: 9e3 });
      await company_dev.deleteData({ series: building_id, qty: 9999 });
      await company_dev.deleteData({ variables: "device_building", values: building_id, qty: 999 });
      const device_info = await account.devices.info(building_id);
      await account.devices.delete(building_id);
      await account.buckets.delete(device_info.bucket.id);
      return;
    };
  }
});

// src/services/building/edit.ts
var edit_default4;
var init_edit4 = __esm({
  "src/services/building/edit.ts"() {
    init_getDevice();
    edit_default4 = async ({ config_dev, context, scope, account, environment }, company_dev) => {
      const name = scope.find((x) => x.variable === "building_name");
      const { serie, origin: company_id } = scope[0];
      const building_dev = await getDevice_default(account, serie);
      if (name) {
        const [building_data] = await company_dev.getData({ variables: "building_id", qty: 1, series: serie });
        await company_dev.deleteData({ ids: building_data.id });
        await config_dev.deleteData({ variables: "building_id", values: serie });
        building_data.metadata.label = name.value;
        delete building_data.time;
        delete building_data.id;
        await company_dev.sendData(building_data);
        await config_dev.sendData({
          variable: "building_id",
          value: serie,
          serie: company_id,
          metadata: { url: building_data.metadata.url, label: name.value }
        });
        await account.devices.edit(serie, { name: name.value });
        const bucket_id = (await account.devices.info(serie)).bucket.id;
        await account.buckets.edit(bucket_id, { name: name.value });
        const devs_building = await account.devices.list({
          page: 1,
          fields: ["id", "name", "tags"],
          filter: {
            tags: [
              { key: "building_id", value: building_data.value },
              { key: "device_type", value: "freezer" }
            ]
          },
          amount: 1e4
        });
        const id_list = [];
        devs_building.forEach((dev) => {
          id_list.push(dev.id);
        });
        const device_company_data = await config_dev.getData({ variables: "device_building", series: id_list });
        await config_dev.deleteData({ variables: "device_building", series: id_list });
        for (const obj of device_company_data) {
          obj.metadata.label = name.value;
          await config_dev.sendData(obj);
        }
      }
    };
  }
});

// src/services/building/index.ts
var building_exports = {};
__export(building_exports, {
  checkType: () => checkType4,
  controller: () => controller4
});
function checkType4(scope, environment) {
  if (scope.find((x) => x.variable === "new_building_name"))
    return "add";
  else if (scope.find((x) => x.variable === "building_name") && environment._widget_exec === "delete")
    return "remove";
  else if (scope.find((x) => ["building_name", "building_address"].includes(x.variable)) && environment._widget_exec === "edit")
    return "edit";
}
async function controller4(params) {
  const type = checkType4(params.scope, params.environment);
  const company_dev = await getDevice_default(params.account, params.scope[0].origin);
  if (type === "add")
    await register_default4(params, company_dev);
  else if (type === "remove")
    await remove_default4(params, company_dev);
  else if (type === "edit")
    await edit_default4(params, company_dev);
}
var init_building = __esm({
  "src/services/building/index.ts"() {
    init_getDevice();
    init_register4();
    init_remove4();
    init_edit4();
  }
});

// src/services/company_users/register.ts
var register_default5;
var init_register5 = __esm({
  "src/services/company_users/register.ts"() {
    init_validation();
    init_registerUser();
    init_data_logic();
    init_getDevice();
    register_default5 = async ({ config_dev, context, scope, account, environment }, customer_dev) => {
      const validate = validation("new_company_user_validation", config_dev);
      validate("Inviting...", "warning");
      const new_user_phone = scope.find((x) => x.variable === "new_company_user_phone");
      const new_user_name = scope.find((x) => x.variable === "new_company_user_name");
      const new_user_email = scope.find((x) => x.variable === "new_company_user_email");
      const new_user_company = scope.find((x) => x.variable === "new_company_user_company") || { value: scope[0].origin };
      const new_user_building = scope.find((x) => x.variable === "new_company_user_building" && x.metadata.sentValues);
      if (customer_dev === null) {
        customer_dev = await getDevice_default(account, new_user_company?.value);
      }
      if (!new_user_name.value) {
        validate("Missing user's name", "danger");
        throw "<New Device> Missing user's name";
      }
      if (!new_user_email.value) {
        validate("Missing user's email", "danger");
        throw "<New Device> Missing user's email";
      }
      if (new_user_phone?.value) {
        if (!new_user_phone.value.includes("+")) {
          new_user_phone.value = `+1${new_user_phone.value}`;
        }
      }
      new_user_email.value = String(new_user_email.value).toLowerCase();
      const [user_exists] = await customer_dev.getData({ variables: ["user_email", "admin_email"], values: new_user_email.value, qty: 1 });
      if (user_exists) {
        validate("The user is already registered", "danger");
        throw "<New Device> User already exist.";
      }
      const { timezone } = await account.info();
      const domain_url = environment.run_url;
      const user_data = {
        name: new_user_name.value,
        email: new_user_email.value,
        timezone,
        company: new_user_company.value,
        phone: new_user_phone.value,
        tags: [
          { key: "access", value: "apartmentUser" },
          { key: "company_id", value: new_user_company.value }
        ]
      };
      user_data.tags = user_data.tags.concat(new_user_building.metadata.sentValues.map((x) => ({ key: "building_id", value: x.value })));
      const new_user_id = await registerUser_default(context, account, user_data, domain_url);
      const device_data = parseTagoObject({
        company_user_name: new_user_name.value,
        company_user_email: new_user_email.value,
        company_user_phone: new_user_phone.value,
        company_user_company: new_user_company.value,
        company_user_building: new_user_building
      }, new_user_id);
      await customer_dev?.sendData(device_data);
      await config_dev.sendData(device_data);
      validate("User successfully added", "success");
    };
  }
});

// src/services/company_users/remove.ts
var remove_default5;
var init_remove5 = __esm({
  "src/services/company_users/remove.ts"() {
    remove_default5 = async ({ config_dev, context, scope, account, environment }, customer_dev) => {
      const { serie: user_id } = scope[0];
      const user_exists = await account.run.userInfo(user_id);
      if (!user_exists)
        throw "User does not exist";
      await account.run.userDelete(user_id);
      await config_dev.deleteData({ series: user_id, qty: 9999 });
      if (customer_dev)
        await customer_dev.deleteData({ series: user_id, qty: 9999 });
    };
  }
});

// src/services/company_users/edit.ts
var edit_default5;
var init_edit5 = __esm({
  "src/services/company_users/edit.ts"() {
    edit_default5 = async ({ config_dev, context, scope, account, environment }) => {
      const { serie: user_id } = scope[0];
      const user_name = scope.find((x) => x.variable === "company_user_name");
      const user_phone = scope.find((x) => x.variable === "company_user_phone");
      const user_building = scope.find((x) => x.variable === "company_user_building");
      let { name, phone, tags } = await account.run.userInfo(user_id);
      if (user_building) {
        const buildings = user_building.metadata?.sentValues?.map((x) => ({
          key: "building_id",
          value: x.value
        }));
        tags = tags.filter((x) => !["building_id"].includes(x.key));
        if (buildings)
          tags = tags.concat(buildings);
      }
      if (user_phone) {
        phone = user_phone.value;
      }
      if (user_name) {
        name = user_name.value;
      }
      await account.run.userEdit(user_id, { tags, name, phone });
    };
  }
});

// src/services/company_users/index.ts
var company_users_exports = {};
__export(company_users_exports, {
  checkType: () => checkType5,
  controller: () => controller5
});
function checkType5(scope, environment) {
  if (scope.find((x) => x.variable === "new_company_user_name"))
    return "add";
  else if (scope.find((x) => x.variable === "company_user_name") && environment._widget_exec === "delete")
    return "remove";
  else if (scope.find((x) => x.variable.includes("company_user_")) && environment._widget_exec === "edit")
    return "edit";
}
async function controller5(params) {
  const type = checkType5(params.scope, params.environment);
  let customer_dev = null;
  if (params.scope.find((x) => x.variable === "hidden"))
    customer_dev = await getDevice_default(params.account, params.scope[0].origin);
  if (type === "add")
    await register_default5(params, customer_dev);
  else if (type === "remove")
    await remove_default5(params, customer_dev);
  else if (type === "edit")
    await edit_default5(params);
}
var init_company_users = __esm({
  "src/services/company_users/index.ts"() {
    init_getDevice();
    init_register5();
    init_remove5();
    init_edit5();
  }
});

// src/services/alert/register.ts
var register_default6;
var init_register6 = __esm({
  "src/services/alert/register.ts"() {
    register_default6 = async ({ config_dev, context, scope, account, environment }, company_id) => {
      const checkin_time = scope.find((x) => x.variable === "alert_checkin");
      const params = await account.devices.paramList(company_id);
      const checkin_param = params.find((x) => x.key === "checkin");
      if (!checkin_time.value && !checkin_param)
        return;
      if (checkin_param) {
        await account.devices.paramSet(company_id, { ...checkin_param, value: String(checkin_time?.value) || "" });
      } else {
        await account.devices.paramSet(company_id, { key: "checkin", value: String(checkin_time?.value), sent: false });
      }
    };
  }
});

// src/services/alert/index.ts
var alert_exports = {};
__export(alert_exports, {
  checkType: () => checkType6,
  controller: () => controller6
});
function checkType6(scope, environment) {
  if (scope.find((x) => x.variable === "alert_checkin"))
    return "add";
}
async function controller6(params) {
  const type = checkType6(params.scope, params.environment);
  if (type === "add")
    await register_default6(params, params.scope[0].origin);
}
var init_alert = __esm({
  "src/services/alert/index.ts"() {
    init_register6();
  }
});

// src/handler.ts
__export(exports, {
  default: () => handler_default
});
var import_sdk6 = __toModule(require("@tago-io/sdk"));
var servicesCollection = Promise.all([
  Promise.resolve().then(() => (init_super_users(), super_users_exports)),
  Promise.resolve().then(() => (init_sensor(), sensor_exports)),
  Promise.resolve().then(() => (init_company(), company_exports)),
  Promise.resolve().then(() => (init_building(), building_exports)),
  Promise.resolve().then(() => (init_company_users(), company_users_exports)),
  Promise.resolve().then(() => (init_alert(), alert_exports))
]);
async function handler(context, scope) {
  context.log(JSON.stringify(scope));
  context.log("Running Analysis");
  const environment = import_sdk6.Utils.envToJson(context.environment);
  if (!environment) {
    return;
  }
  if (!environment.config_token) {
    throw "Missing config_token environment var";
  } else if (!environment.account_token) {
    throw "Missing account_token environment var";
  }
  const config_dev = new import_sdk6.Device({ token: environment.config_token });
  const account = new import_sdk6.Account({ token: environment.account_token });
  const notification = new import_sdk6.Services({ token: context.token }).Notification;
  const serviceParams = { context, account, config_dev, scope, notification, environment };
  const service = (await servicesCollection).find((x) => x.checkType(scope, environment));
  if (service) {
    await service.controller(serviceParams);
  }
}
async function startAnalysis(context, scope) {
  try {
    await handler(context, scope);
    context.log("Analysis finished");
  } catch (error) {
    console.log(error);
    context.log(error.message || JSON.stringify(error));
  }
}
var handler_default = new import_sdk6.Analysis(startAnalysis, { token: "7327d9c7-6810-4dee-a7ee-0b5fe09991ba" });
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
